apiVersion: v1
kind: Template
labels:
  template: manageiq
metadata:
  name: manageiq
  annotations:
    description: "ManageIQ appliance template"
    tags: "manageiq,quickstart,miq"
    iconClass: "icon-app-code"
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: "Exposes and load balances ManageIQ pods"
    name: ${NAME}
  spec:
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    port:
      targetPort: https
    tls:
      termination: passthrough
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: miq-app
    annotations:
      description: "Keeps track of changes in the ManageIQ app image"
  spec:
    dockerImageRepository: docker.io/fbladilo/miq-app
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_VOLUME_CAPACITY}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${APP_VOLUME_CAPACITY}
- apiVersion: v1
  kind: "DeploymentConfig"
  metadata:
    name: ${NAME}
    annotations:
      description: "Defines how to deploy the ManageIQ appliance"
  spec:
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        volumes:
          -
            name: "miq-app-volume"
            persistentVolumeClaim:
              claimName: ${NAME}
        containers:
        - image: fbladilo/miq-app:latest
          imagePullPolicy: IfNotPresent
          name: manageiq
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 300
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 180
            timeoutSeconds: 3
          ports:
          - containerPort: 80
            protocol: TCP
          - containerPort: 443
            protocol: TCP
          securityContext:
            privileged: true
          volumeMounts:
              -
                name: "miq-app-volume"
                mountPath: "/var/www/miq/vmdb/persistent"
          env:
            -
              name: "DATABASE_SERVICE_NAME"
              value: "${DATABASE_SERVICE_NAME}"
            -
              name: "DATABASE_REGION"
              value: "${DATABASE_REGION}"
            -
              name: "MEMCACHED_SERVICE_NAME"
              value: "${MEMCACHED_SERVICE_NAME}"
            -
              name: "POSTGRESQL_USER"
              value: "${DATABASE_USER}"
            -
              name: "POSTGRESQL_PASSWORD"
              value: "${DATABASE_PASSWORD}"
            -
              name: "POSTGRESQL_DATABASE"
              value: "${DATABASE_NAME}"
            -
              name: "POSTGRESQL_MAX_CONNECTIONS"
              value: "${POSTGRESQL_MAX_CONNECTIONS}"
            -
              name: "POSTGRESQL_SHARED_BUFFERS"
              value: "${POSTGRESQL_SHARED_BUFFERS}"
    replicas: 1
    selector:
      name: ${NAME}
    triggers:
      - type: "ConfigChange"
      - type: "ImageChange"
        imageChangeParams:
          automatic: false
          containerNames:
            - "manageiq"
          from:
            kind: "ImageStreamTag"
            name: "miq-app:latest"
    strategy:
      type: "Recreate"
- apiVersion: v1
  kind: "Service"
  metadata:
    name: "${MEMCACHED_SERVICE_NAME}"
    annotations:
      description: "Exposes the memcached server"
  spec:
    ports:
      -
        name: "memcached"
        port: 11211
        targetPort: 11211
    selector:
      name: "${MEMCACHED_SERVICE_NAME}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: miq-memcached
    annotations:
      description: "Keeps track of changes in the memcached image"
  spec:
    dockerImageRepository: docker.io/fbladilo/miq-memcached
- apiVersion: v1
  kind: "DeploymentConfig"
  metadata:
    name: "${MEMCACHED_SERVICE_NAME}"
    annotations:
      description: "Defines how to deploy memcached"
  spec:
    strategy:
      type: "Recreate"
    triggers:
      -
        type: "ImageChange"
        imageChangeParams:
          automatic: true
          containerNames:
            - "memcached"
          from:
            kind: "ImageStreamTag"
            name: "miq-memcached:latest"
      -
        type: "ConfigChange"
    replicas: 1
    selector:
      name: "${MEMCACHED_SERVICE_NAME}"
    template:
      metadata:
        name: "${MEMCACHED_SERVICE_NAME}"
        labels:
          name: "${MEMCACHED_SERVICE_NAME}"
      spec:
        volumes: []
        containers:
          -
            name: "memcached"
            image: "fbladilo/miq-memcached:latest"
            ports:
              -
                containerPort: 11211
            readinessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 5
              tcpSocket:
                port: 11211
            livenessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 30
              tcpSocket:
                port: 11211
            volumeMounts: []
            env:
              -
                name: "MEMCACHED_MAX_MEMORY"
                value: "${MEMCACHED_MAX_MEMORY}"
              -
                name: "MEMCACHED_MAX_CONNECTIONS"
                value: "${MEMCACHED_MAX_CONNECTIONS}"
              -
                name: "MEMCACHED_SLAB_PAGE_SIZE"
                value: "${MEMCACHED_SLAB_PAGE_SIZE}"
            resources:
              limits:
                memory: "${MEMORY_MEMCACHED_LIMIT}"
- apiVersion: v1
  kind: "Service"
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: "Exposes the database server"
  spec:
    ports:
      -
        name: "postgresql"
        port: 5432
        targetPort: 5432
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: miq-postgresql
    annotations:
      description: "Keeps track of changes in the ManageIQ postgresql image"
  spec:
    dockerImageRepository: docker.io/fbladilo/miq-postgresql
- apiVersion: v1
  kind: "DeploymentConfig"
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: "Defines how to deploy the database"
  spec:
    strategy:
      type: "Recreate"
    triggers:
      -
        type: "ImageChange"
        imageChangeParams:
          automatic: false
          containerNames:
            - "postgresql"
          from:
            kind: "ImageStreamTag"
            name: "miq-postgresql:latest"
      -
        type: "ConfigChange"
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        volumes:
          -
            name: "miq-pgdb-volume"
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
        containers:
          -
            name: "postgresql"
            image: "fbladilo/miq-postgresql:latest"
            ports:
              -
                containerPort: 5432
            readinessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 5
              exec:
                command:
                  - "/bin/sh"
                  - "-i"
                  - "-c"
                  - "psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'"
            livenessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
            volumeMounts:
              -
                name: "miq-pgdb-volume"
                mountPath: "/var/lib/pgsql/data"
            env:
              -
                name: "POSTGRESQL_USER"
                value: "${DATABASE_USER}"
              -
                name: "POSTGRESQL_PASSWORD"
                value: "${DATABASE_PASSWORD}"
              -
                name: "POSTGRESQL_DATABASE"
                value: "${DATABASE_NAME}"
              -
                name: "POSTGRESQL_MAX_CONNECTIONS"
                value: "${POSTGRESQL_MAX_CONNECTIONS}"
              -
                name: "POSTGRESQL_SHARED_BUFFERS"
                value: "${POSTGRESQL_SHARED_BUFFERS}"
            resources:
              limits:
                memory: "${MEMORY_POSTGRESQL_LIMIT}"

parameters:
  -
    name: "NAME"
    displayName: Name
    description: "The name assigned to all of the frontend objects defined in this template"
    required: true
    value: manageiq
  -
    name: "DATABASE_SERVICE_NAME"
    required: true
    displayName: "PostgreSQL service name"
    value: "postgresql"
  -
    name: "DATABASE_USER"
    displayName: "PostgreSQL user that will be used for accessing the database"
    generate: "expression"
    from: "user[A-Z0-9]{3}"
  -
    name: "DATABASE_PASSWORD"
    displayName: "PostgreSQL password for database user"
    generate: "expression"
    from: "[a-zA-Z0-9]{8}"
  -
    name: "DATABASE_NAME"
    required: true
    displayName: "PostgreSQL database name"
    value: "vmdb_production"
  -
    name: "DATABASE_REGION"
    required: true
    displayName: "Application database region"
    value: "0"
  -
    name: "MEMCACHED_SERVICE_NAME"
    required: true
    displayName: "Memcached Service Name"
    value: "memcached"
  -
    name: "MEMCACHED_MAX_MEMORY"
    displayName: "Memcached maximum memory for memcached object storage in MB"
    value: "64"
  -
    name: "MEMCACHED_MAX_CONNECTIONS"
    displayName: "Memcached maximum number of connections for memcached"
    value: "1024"
  -
    name: "MEMCACHED_SLAB_PAGE_SIZE"
    displayName: "Memcached size of each slab page"
    value: "1m"
  -
    name: "POSTGRESQL_MAX_CONNECTIONS"
    displayName: "Maximum Database Connections (PostgreSQL)"
    value: "100"
  -
    name: "POSTGRESQL_SHARED_BUFFERS"
    displayName: "Shared Buffer Amount (PostgreSQL)"
    value: "12MB"
  -
    name: "MEMORY_POSTGRESQL_LIMIT"
    displayName: "Memory Limit (PostgreSQL)"
    required: true
    description: "Maximum amount of memory the PostgreSQL container can use"
    value: "2048Mi"
  -
    name: "MEMORY_MEMCACHED_LIMIT"
    displayName: "Memory Limit (Memcached)"
    required: true
    description: "Maximum amount of memory the Memcached container can use"
    value: "256Mi"
  -
    name: "APP_VOLUME_CAPACITY"
    displayName: "Application Volume Capacity"
    required: true
    description: "Volume space available for persistent application data"
    value: "1Gi"
  -
    name: "DB_VOLUME_CAPACITY"
    displayName: "Database Volume Capacity"
    required: true
    description: "Volume space available for database"
    value: "1Gi"
